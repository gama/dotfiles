if (exists("g:loaded_fuf"))
	nnoremap <silent> <Leader>b :FufBuffer<CR>
	nnoremap <silent> <Leader>f :FufFileWithCurrentBufferDir<CR>
	nnoremap <silent> <Leader>F :FufFileWithFullCwd<CR>
	nnoremap <silent> æ :FufFileExpanded<CR>

	let g:fuf_keyOpenSplit     = 'ï'
	let g:fuf_keyOpenVsplit    = 'Ï'
	let g:fuf_keyOpenTabpage   = 'é'
	let g:fuf_keyOpenTabpage   = 'é'
	let g:fuf_keyNextMode      = 'î'
	let g:fuf_keyPrevMode      = 'ð'

	let g:fuf_smartBs          = 0
	let g:fuf_learningLimit    = 30
	let g:fuf_enumeratingLimit = 20
	let g:fuf_maxMenuWidth     = 113

	" let g:fuf_file_exclude = '\v\~$|\.(o|lo|a|la|exe|bak|swp|class|jpg|jpeg|png|gif|tif|mp3|mp4|m4a|ogg|wav|ogv|mkv|avi|flv|m)$|(^|[/\\])\.(hg|git|bzr|deps|libs)($|[/\\])|(^|[/\\])(storage|storage.old|debug|build)($|[/\\])'
	let g:fuf_file_exclude = '\v\.(o|lo|a|la|exe|bak|swp|class|jpg|jpeg|png|gif|tif|mp3|mp4|m4a|ogg|wav|ogv|mkv|avi|flv)$|\~$|(^|/)(\.hg|\.git|\.bzr|\.deps|\.libs|storage|debug|build)($|/)'

	autocmd Filetype fuf inoremap <buffer> ë <C-P>
	autocmd Filetype fuf inoremap <buffer> ê <C-N>
	autocmd Filetype fuf inoremap <buffer> <Tab> <C-y>
	call fuf#defineLaunchCommand('FufFileExpanded', 'file', '"**/"')
endif
